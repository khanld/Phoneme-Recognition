[meta]
name = "ASR-PHONEME-EN" 
seed = 42
epochs = 10
save_dir = "saved/" 
gradient_accumulation_steps = 3
use_amp = false # Whether to use Automatic Mixed Precision for speeding up - https://pytorch.org/docs/stable/amp.html
device_ids = "7" # set the gpu devices on which you want to train your model
sr = 16000
max_clip_grad_norm = 5.0 # torch.nn.utils.clip_grad_norm_


[huggingface]
# You need to install git-lfs to be able to push
# Check out https://huggingface.co/docs/hub/how-to-upstream#repository to understand the parameters
push_to_hub = false
push_every_validation_step = false # If false, repo will be push at the end of training [recommended false]
overwrite_output_dir = false
blocking = false # whether to wait until the model is uploaded (this will be very slow because of large file) [recommended false, true only if push_every_validation_step is false]

    # you can pass your auth_token from your huggingface account to use_auth_token.
    # Otherwise you need to run ```huggingface-cli login``` command to log in
    [huggingface.args]
    local_dir = "huggingface-hub" # where your repo places in local
    use_auth_token = true # you must provide the auth_token of your huggingface account. 
    clone_from = "" # path to your repo in huggingface



[train_dataset]
path = "base.base_dataset.BaseDataset"
    [train_dataset.args]
    path = "/data1/speech/khanhld/ASR-Wa2vec-Finetune-Phoneme-En/dataset/train.pkl"
    preload_data = false
    delimiter = "|"
    # Only train audio files that have duration in range [min_duration, max_duration]
    # min_duration = 0.5 # default is -np.inf
    # max_duration = 20 # default is np.inf
    nb_workers = 2
    
    [train_dataset.dataloader]
    batch_size = 4
    num_workers = 16
    pin_memory = true 
    drop_last = true
    persistent_workers = true

    [train_dataset.sampler]
    shuffle = true 
    drop_last = true

    
[val_dataset]
path = "base.base_dataset.BaseDataset"
    [val_dataset.args]
    path = "/data1/speech/khanhld/ASR-Wa2vec-Finetune-Phoneme-En/dataset/test.pkl"
    preload_data = false
    delimiter = "|"
    nb_workers = 16

    [val_dataset.dataloader]
    batch_size =  1 # Set validation batch_size > 1 may yield an incorrect score due to padding (but faster :D) - https://github.com/pytorch/fairseq/issues/3227 
    num_workers = 2
    pin_memory = true 
    persistent_workers = true

    [val_dataset.sampler]
    shuffle = false 
    drop_last = false

 
[optimizer]
lr = 8e-6


[scheduler] 
max_lr = 3e-5
    

[trainer]
path = "trainer.trainer.Trainer"
    [trainer.args]
    validation_interval = 5000
    save_max_metric_score = false 
